#version 100

precision mediump float;

//x, y, width, height
uniform vec4 resolution;
uniform float time;
uniform vec2 mouse;
uniform vec2 zoom;
uniform vec2 offset;

varying vec2 uv;
varying vec4 color;

float log10(float f) {
    return log(f) / log(10.0);
}

float map(vec2 cPos, vec2 zoom_level, vec2 offset) {
    vec2 fact = vec2(log10(zoom_level.x * 4.5), log10(zoom_level.y * 4.5));
    vec2 fr = vec2(fract(fact.x), fract(fact.y));
    vec2 baseMinor = floor(fact) - 1.0;
    vec2 baseMajor = baseMinor + 1.;
    vec2 divs = vec2(pow(10., baseMinor.x), pow(10., baseMinor.y));
    vec2 divsMajor = vec2(pow(10., baseMajor.x), pow(10., baseMajor.y));
    cPos *= zoom_level;
    cPos += offset;
    vec2 mcPosd = mod(cPos + divs/2., divs) - divs/2.;
    vec2 mcPosdM = mod(cPos + divsMajor/2., divsMajor) - divsMajor/2.;

    vec2 to = divs/(80. * (1. + 5.*(1. - 1.*fr)));
    float yd = 1. - smoothstep(abs(mcPosd.y), 0.0, to.y);
    float xd = 1. - smoothstep(abs(mcPosd.x), 0.0, to.x);
    float ydM = 1. - smoothstep(abs(mcPosdM.y), 0.0, to.y*4.);
    float xdM = 1. - smoothstep(abs(mcPosdM.x), 0.0, to.x*4.);
    float k = 20.;
    return max(max(yd, xd), max(ydM, xdM));
}

void main(void) {
    vec2 fragCoord = gl_FragCoord.xy - resolution.xy;
    vec2 uv = fragCoord.xy / resolution.zw;
    vec2 cPos = ( fragCoord - .5*resolution.zw ) / resolution.w;
    gl_FragColor = vec4(0.2, 0.3, 0.5, 1.0)*vec4(map(cPos, zoom, offset));
    if (fragCoord.y - 2. < 0. || fragCoord.y + 2. > resolution.w || fragCoord.x - 2. < 0. || (fragCoord.x + 2.) > resolution.z) {
      gl_FragColor = vec4(1.0);
    }
}
#version 100
precision mediump float;

varying vec4 vc;
varying vec2 normal;

uniform vec2 screen;
uniform vec4 resolution;
uniform vec2 zoom;

void main()
{
  float shade = 1. - smoothstep(length(normal), 0.0, .3) ;
  if (shade == 0.) return;
  vec4 cshade = vec4(shade);
  vec4 r = resolution;
  r.x += 2.;
  r.z -= 4.;
  r.y += 2.;
  r.w -= 4.;
  gl_FragColor = gl_FragCoord.x <= r.x || gl_FragCoord.x >= (r.x + r.z) || 
   gl_FragCoord.y <= r.y || gl_FragCoord.y >= (r.y + r.w) ? vec4(0.) : (vc * clamp(cshade, 0., 1.));
}
#version 100
precision mediump float;

attribute vec3 vertexPosition;
// This is not normal. This is dx, dy, and length of the line.
attribute vec3 vertexNormal;
attribute vec4 vertexColor;

varying vec4 vc;
varying vec2 normal;

uniform vec2 offset;
uniform vec4 resolution;
uniform vec2 zoom;
uniform vec2 screen;

void main(void)
{
    // TODO: make this uniform.
    float thick = 0.09;
    vc = vec4(normalize(vertexColor));
    vec2 tg = vertexNormal.xy;
    vec2 position = vertexPosition.xy;

    normal = -vertexPosition.z * normalize(tg.yx * zoom * vec2(-1, 1));
    vec2 dif = normal * thick/2.;
    position -= dif * (min(zoom * 0.1, 20000.0));

    vec2 size = resolution.zw;

    //Don't know why, but this value works...
    float magic_number = size.y / screen.y * 2.;

    vec2 fact = screen.xy / screen.yy;
    vec2 fact2 = resolution.ww / screen.xy;
    vec2 uv = position * magic_number;
    uv -= offset * fact2 * fact * 2.;
    uv /= zoom * fact;
    uv += vec2(-1., 1.);
    uv += resolution.xy/screen.xy*vec2(2., -2.);
    uv += resolution.zw/screen.xy*vec2(1., -1.);
    gl_Position = vec4(uv, 0., 1.0);
}

